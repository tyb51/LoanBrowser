generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  cases          Case[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Case {
  id                   String                @id @default(uuid())
  title                String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  projectName          String?
  purchaseDate         DateTime?
  purchasePrice        Float?
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients              Client[]
  investmentSimulation InvestmentSimulation?
  loanSimulations      LoanSimulation[]
  insuranceSimulations InsuranceSimulation[]

  // New: linked cases
  linkedToCases   CaseLink[] @relation("LinkedToCase")
  linkedFromCases CaseLink[] @relation("LinkedFromCase")
}

model Client {
  id                    String                 @id @default(uuid())
  name                  String
  type                  ClientType
  age                   Int?
  height                Float?
  weight                Float?
  smoker                Boolean?
  currentCapital        Float
  currentDebt           Float
  monthlyIncome         Float
  caseId                String
  case                  Case                   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  insurances            Insurance[]
  loanSimulations       LoanSimulation[] // Many-to-many relationship with LoanSimulation
  investmentSimulations InvestmentSimulation[]
  InsuranceSimulation   InsuranceSimulation[]
  HomeInsuranceClient   HomeInsuranceClient[]
}

model LoanSimulation {
  id                   String                 @id @default(uuid())
  name                 String
  loanType             LoanType
  principal            Float
  interestRate         Float
  termYears            Int
  ownContribution      Float
  purchasePrice        Float?
  startYear            Int?
  insuranceCoveragePct Float?
  monthlyPayment       Float?
  totalInterest        Float?
  totalPayment         Float?
  calculationResult    String? // JSON string containing calculation details
  delayMonths          Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  caseId               String
  alternativeFor       InvestmentSimulation[] @relation("AlternativeLoan")
  referenceFor         InvestmentSimulation[] @relation("ReferenceLoan")
  case                 Case                   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  modularSchedule      ModularScheduleItem[]
  clients              Client[] // Many-to-many relationship with clients
}

model ModularScheduleItem {
  id               String         @id @default(uuid())
  month            Int
  amount           Float
  loanSimulationId String
  loanSimulation   LoanSimulation @relation(fields: [loanSimulationId], references: [id], onDelete: Cascade)
}

model InvestmentSimulation {
  id                String         @id @default(uuid())
  name              String
  startCapital      Float
  annualGrowthRate  Float
  refInvestCapital  Float
  altInvestCapital  Float
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  caseId            String         @unique
  referenceLoanId   String
  alternativeLoanId String
  alternativeLoan   LoanSimulation @relation("AlternativeLoan", fields: [alternativeLoanId], references: [id])
  case              Case           @relation(fields: [caseId], references: [id], onDelete: Cascade)
  referenceLoan     LoanSimulation @relation("ReferenceLoan", fields: [referenceLoanId], references: [id])
  Client            Client?        @relation(fields: [clientId], references: [id])
  clientId          String?
}

model InsuranceSimulation {
  id                String        @id @default(uuid())
  name              String
  type              InsuranceType
  parameters        Json // Store parameters like coverage%, paymentType, propertyValue, etc.
  calculationResult Json? // Store calculated premium, amortization if needed (optional)

  // Life insurance is linked to a client
  clientId String? // Optional for home insurance 
  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Home insurance can be associated with multiple clients
  homeInsuranceClients HomeInsuranceClient[]

  // Both types are linked to a case
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  // Simulated interest for home insurance (optional)
  simulatedInterestRate Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// These models are kept for historical data but are deprecated and will be removed in future versions
model Insurance {
  id                 String         @id @default(uuid())
  type               InsuranceType
  coveragePercentage Float
  initialPremium     Float
  clientId           String
  homeInsurance      HomeInsurance?
  client             Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  lifeInsurance      LifeInsurance?
}

model LifeInsurance {
  id                      String      @id @default(uuid())
  paymentType             PaymentType
  basedOnRemainingCapital Boolean
  insuranceId             String      @unique
  insurance               Insurance   @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

model HomeInsurance {
  id            String    @id @default(uuid())
  propertyValue Float
  propertyType  String
  insuranceId   String    @unique
  insurance     Insurance @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum LoanType {
  ANNUITY
  BULLET
  MODULAR
}

enum InsuranceType {
  LIFE
  HOME
}

enum PaymentType {
  LUMP_SUM
  DISTRIBUTED
}

// New: Model to represent case links (for linked cases feature)
model CaseLink {
  id         String   @id @default(uuid())
  fromCaseId String
  toCaseId   String
  linkType   String? // Optional field to describe the type of link (e.g., "Parent", "Related", etc.)
  createdAt  DateTime @default(now())
  fromCase   Case     @relation("LinkedFromCase", fields: [fromCaseId], references: [id], onDelete: Cascade)
  toCase     Case     @relation("LinkedToCase", fields: [toCaseId], references: [id], onDelete: Cascade)
}

// New: Model to represent home insurance client relationships (many-to-many)
model HomeInsuranceClient {
  id                    String              @id @default(uuid())
  insuranceSimulationId String
  clientId              String
  sharePercentage       Float               @default(100.0) // Percentage of the insurance cost assigned to this client
  insuranceSimulation   InsuranceSimulation @relation(fields: [insuranceSimulationId], references: [id], onDelete: Cascade)
  client                Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt             DateTime            @default(now())

  @@unique([insuranceSimulationId, clientId])
}
