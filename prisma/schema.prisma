generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  cases          Case[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Case {
  id                   String                @id @default(uuid())
  title                String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  projectName          String?
  purchaseDate         DateTime?
  purchasePrice        Float?
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients              Client[]
  investmentSimulation InvestmentSimulation?
  loanSimulations      LoanSimulation[]
}

model Client {
  id             String            @id @default(uuid())
  name           String
  type           ClientType
  age            Int?
  height         Float?
  weight         Float?
  smoker         Boolean?
  currentCapital Float
  currentDebt    Float
  monthlyIncome  Float
  caseId         String
  case           Case              @relation(fields: [caseId], references: [id], onDelete: Cascade)
  insurances     Insurance[]
  loanSimulations LoanSimulation[]  // Many-to-many relationship with LoanSimulation
}

model LoanSimulation {
  id                   String                 @id @default(uuid())
  name                 String
  loanType             LoanType
  principal            Float
  interestRate         Float
  termYears            Int
  ownContribution      Float
  purchasePrice        Float?
  startYear            Int?
  insuranceCoveragePct Float?
  monthlyPayment       Float?
  totalInterest        Float?
  totalPayment         Float?
  calculationResult    String?               // JSON string containing calculation details
  delayMonths          Int                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  caseId               String
  alternativeFor       InvestmentSimulation[] @relation("AlternativeLoan")
  referenceFor         InvestmentSimulation[] @relation("ReferenceLoan")
  case                 Case                   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  modularSchedule      ModularScheduleItem[]
  clients              Client[]               // Many-to-many relationship with clients
}

model ModularScheduleItem {
  id               String         @id @default(uuid())
  month            Int
  amount           Float
  loanSimulationId String
  loanSimulation   LoanSimulation @relation(fields: [loanSimulationId], references: [id], onDelete: Cascade)
}

model InvestmentSimulation {
  id                String         @id @default(uuid())
  name              String
  startCapital      Float
  annualGrowthRate  Float
  refInvestCapital  Float
  altInvestCapital  Float
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  caseId            String         @unique
  referenceLoanId   String
  alternativeLoanId String
  alternativeLoan   LoanSimulation @relation("AlternativeLoan", fields: [alternativeLoanId], references: [id])
  case              Case           @relation(fields: [caseId], references: [id], onDelete: Cascade)
  referenceLoan     LoanSimulation @relation("ReferenceLoan", fields: [referenceLoanId], references: [id])
}

model Insurance {
  id                 String         @id @default(uuid())
  type               InsuranceType
  coveragePercentage Float
  initialPremium     Float
  clientId           String
  homeInsurance      HomeInsurance?
  client             Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  lifeInsurance      LifeInsurance?
}

model LifeInsurance {
  id                      String      @id @default(uuid())
  paymentType             PaymentType
  basedOnRemainingCapital Boolean
  insuranceId             String      @unique
  insurance               Insurance   @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

model HomeInsurance {
  id            String    @id @default(uuid())
  propertyValue Float
  propertyType  String
  insuranceId   String    @unique
  insurance     Insurance @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum LoanType {
  ANNUITY
  BULLET
  MODULAR
}

enum InsuranceType {
  LIFE
  HOME
}

enum PaymentType {
  LUMP_SUM
  DISTRIBUTED
}
